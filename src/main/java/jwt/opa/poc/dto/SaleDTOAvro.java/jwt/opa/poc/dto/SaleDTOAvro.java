/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package jwt.opa.poc.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SaleDTOAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8651206301058522219L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SaleDTOAvro\",\"namespace\":\"jwt.opa.poc.dto\",\"fields\":[{\"name\":\"saleColumn1\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"saleColumn2\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"stringType\":\"java.lang.String\"},{\"name\":\"saleColumn3\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SaleDTOAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SaleDTOAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SaleDTOAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SaleDTOAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SaleDTOAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SaleDTOAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SaleDTOAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SaleDTOAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SaleDTOAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String saleColumn1;
  private java.lang.String saleColumn2;
  private java.lang.String saleColumn3;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SaleDTOAvro() {}

  /**
   * All-args constructor.
   * @param saleColumn1 The new value for saleColumn1
   * @param saleColumn2 The new value for saleColumn2
   * @param saleColumn3 The new value for saleColumn3
   */
  public SaleDTOAvro(java.lang.String saleColumn1, java.lang.String saleColumn2, java.lang.String saleColumn3) {
    this.saleColumn1 = saleColumn1;
    this.saleColumn2 = saleColumn2;
    this.saleColumn3 = saleColumn3;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return saleColumn1;
    case 1: return saleColumn2;
    case 2: return saleColumn3;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: saleColumn1 = value$ != null ? value$.toString() : null; break;
    case 1: saleColumn2 = value$ != null ? value$.toString() : null; break;
    case 2: saleColumn3 = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'saleColumn1' field.
   * @return The value of the 'saleColumn1' field.
   */
  public java.lang.String getSaleColumn1() {
    return saleColumn1;
  }


  /**
   * Sets the value of the 'saleColumn1' field.
   * @param value the value to set.
   */
  public void setSaleColumn1(java.lang.String value) {
    this.saleColumn1 = value;
  }

  /**
   * Gets the value of the 'saleColumn2' field.
   * @return The value of the 'saleColumn2' field.
   */
  public java.lang.String getSaleColumn2() {
    return saleColumn2;
  }


  /**
   * Sets the value of the 'saleColumn2' field.
   * @param value the value to set.
   */
  public void setSaleColumn2(java.lang.String value) {
    this.saleColumn2 = value;
  }

  /**
   * Gets the value of the 'saleColumn3' field.
   * @return The value of the 'saleColumn3' field.
   */
  public java.lang.String getSaleColumn3() {
    return saleColumn3;
  }


  /**
   * Sets the value of the 'saleColumn3' field.
   * @param value the value to set.
   */
  public void setSaleColumn3(java.lang.String value) {
    this.saleColumn3 = value;
  }

  /**
   * Creates a new SaleDTOAvro RecordBuilder.
   * @return A new SaleDTOAvro RecordBuilder
   */
  public static jwt.opa.poc.dto.SaleDTOAvro.Builder newBuilder() {
    return new jwt.opa.poc.dto.SaleDTOAvro.Builder();
  }

  /**
   * Creates a new SaleDTOAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SaleDTOAvro RecordBuilder
   */
  public static jwt.opa.poc.dto.SaleDTOAvro.Builder newBuilder(jwt.opa.poc.dto.SaleDTOAvro.Builder other) {
    if (other == null) {
      return new jwt.opa.poc.dto.SaleDTOAvro.Builder();
    } else {
      return new jwt.opa.poc.dto.SaleDTOAvro.Builder(other);
    }
  }

  /**
   * Creates a new SaleDTOAvro RecordBuilder by copying an existing SaleDTOAvro instance.
   * @param other The existing instance to copy.
   * @return A new SaleDTOAvro RecordBuilder
   */
  public static jwt.opa.poc.dto.SaleDTOAvro.Builder newBuilder(jwt.opa.poc.dto.SaleDTOAvro other) {
    if (other == null) {
      return new jwt.opa.poc.dto.SaleDTOAvro.Builder();
    } else {
      return new jwt.opa.poc.dto.SaleDTOAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for SaleDTOAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SaleDTOAvro>
    implements org.apache.avro.data.RecordBuilder<SaleDTOAvro> {

    private java.lang.String saleColumn1;
    private java.lang.String saleColumn2;
    private java.lang.String saleColumn3;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(jwt.opa.poc.dto.SaleDTOAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.saleColumn1)) {
        this.saleColumn1 = data().deepCopy(fields()[0].schema(), other.saleColumn1);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.saleColumn2)) {
        this.saleColumn2 = data().deepCopy(fields()[1].schema(), other.saleColumn2);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.saleColumn3)) {
        this.saleColumn3 = data().deepCopy(fields()[2].schema(), other.saleColumn3);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing SaleDTOAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(jwt.opa.poc.dto.SaleDTOAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.saleColumn1)) {
        this.saleColumn1 = data().deepCopy(fields()[0].schema(), other.saleColumn1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.saleColumn2)) {
        this.saleColumn2 = data().deepCopy(fields()[1].schema(), other.saleColumn2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.saleColumn3)) {
        this.saleColumn3 = data().deepCopy(fields()[2].schema(), other.saleColumn3);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'saleColumn1' field.
      * @return The value.
      */
    public java.lang.String getSaleColumn1() {
      return saleColumn1;
    }


    /**
      * Sets the value of the 'saleColumn1' field.
      * @param value The value of 'saleColumn1'.
      * @return This builder.
      */
    public jwt.opa.poc.dto.SaleDTOAvro.Builder setSaleColumn1(java.lang.String value) {
      validate(fields()[0], value);
      this.saleColumn1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'saleColumn1' field has been set.
      * @return True if the 'saleColumn1' field has been set, false otherwise.
      */
    public boolean hasSaleColumn1() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'saleColumn1' field.
      * @return This builder.
      */
    public jwt.opa.poc.dto.SaleDTOAvro.Builder clearSaleColumn1() {
      saleColumn1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'saleColumn2' field.
      * @return The value.
      */
    public java.lang.String getSaleColumn2() {
      return saleColumn2;
    }


    /**
      * Sets the value of the 'saleColumn2' field.
      * @param value The value of 'saleColumn2'.
      * @return This builder.
      */
    public jwt.opa.poc.dto.SaleDTOAvro.Builder setSaleColumn2(java.lang.String value) {
      validate(fields()[1], value);
      this.saleColumn2 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'saleColumn2' field has been set.
      * @return True if the 'saleColumn2' field has been set, false otherwise.
      */
    public boolean hasSaleColumn2() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'saleColumn2' field.
      * @return This builder.
      */
    public jwt.opa.poc.dto.SaleDTOAvro.Builder clearSaleColumn2() {
      saleColumn2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'saleColumn3' field.
      * @return The value.
      */
    public java.lang.String getSaleColumn3() {
      return saleColumn3;
    }


    /**
      * Sets the value of the 'saleColumn3' field.
      * @param value The value of 'saleColumn3'.
      * @return This builder.
      */
    public jwt.opa.poc.dto.SaleDTOAvro.Builder setSaleColumn3(java.lang.String value) {
      validate(fields()[2], value);
      this.saleColumn3 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'saleColumn3' field has been set.
      * @return True if the 'saleColumn3' field has been set, false otherwise.
      */
    public boolean hasSaleColumn3() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'saleColumn3' field.
      * @return This builder.
      */
    public jwt.opa.poc.dto.SaleDTOAvro.Builder clearSaleColumn3() {
      saleColumn3 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SaleDTOAvro build() {
      try {
        SaleDTOAvro record = new SaleDTOAvro();
        record.saleColumn1 = fieldSetFlags()[0] ? this.saleColumn1 : (java.lang.String) defaultValue(fields()[0]);
        record.saleColumn2 = fieldSetFlags()[1] ? this.saleColumn2 : (java.lang.String) defaultValue(fields()[1]);
        record.saleColumn3 = fieldSetFlags()[2] ? this.saleColumn3 : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SaleDTOAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<SaleDTOAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SaleDTOAvro>
    READER$ = (org.apache.avro.io.DatumReader<SaleDTOAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.saleColumn1);

    out.writeString(this.saleColumn2);

    out.writeString(this.saleColumn3);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.saleColumn1 = in.readString();

      this.saleColumn2 = in.readString();

      this.saleColumn3 = in.readString();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.saleColumn1 = in.readString();
          break;

        case 1:
          this.saleColumn2 = in.readString();
          break;

        case 2:
          this.saleColumn3 = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










